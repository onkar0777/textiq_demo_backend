{"version":3,"sources":["components/List.js","containers/List.container.js","common/Button.js","components/EntityPanel.js","components/DocViewer.js","services/Doc.service.js","containers/DocViewer.container.js","App.js","serviceWorker.js","index.js"],"names":["ListComponent","props","react_default","a","createElement","className","es","width","rowWidth","height","listHeight","rowHeight","rowRenderer","_ref","index","key","style","onClick","onListItemClick","list","undefined","selectedIndex","concat","selectedClass","value","rowCount","length","ListContainer","components_List","docs","Button","background","color","children","btnStyle","backgroundColor","Object","objectSpread","EntityPanel","document","entity","deleteEntity","saveRelatedEntities","removeSelectedEntity","_useState","useState","_useState2","slicedToArray","dropdownVal","setDropdownVal","_useState3","_useState4","dropdownOptions","setDropdownOptions","useEffect","filteredEntities","entities","filter","x","_id","item","linked_to","every","item2","float","cursor","val","map","react_select_browser_esm","onChange","selectedOptions","options","isMulti","isSearchable","closeMenuOnSelect","getOptionLabel","option","getOptionValue","hideSelectedOptions","placeholder","common_Button","DocViewer","selectedEntity","onHighlightClick","addSelectedTextAsEntity","isPopoverOpen","setIsPopoverOpen","selectedText","setSelectedText","onDoubleClick","newSelectedText","window","getSelection","toString","dist_default","isOpen","position","content","main_default","highlightClassName","caseSensitive","searchWords","autoEscape","textToHighlight","text","highlightTag","_ref2","onMouseUp","server_api","getAllDocs","fetch","then","resp","json","data","getTextFromFile","filename","console","log","updatedRelatedEntities","formData","method","headers","Content-Type","body","JSON","stringify","response","deleteAllEntities","DocViewerContainer","updateCurrentDocumentOnDeletion","updateEntityInDoc","addEntityToDoc","DocService","docId","updatedDoc","react","components_DocViewer","addedEntity","CSSTransition","in","timeout","classNames","components_EntityPanel","relatedEntities","entityId","updatedEntity","marginTop","App","currentDoc","setCurrentDoc","currentDocIndex","setCurrentDocIndex","_useState5","_useState6","setDocs","_useState7","_useState8","setSelectedEntity","fetchFile","catch","err","docMeta","name","updateCurrentDocInList","toConsumableArray","slice","containers_List_container","containers_DocViewer_container","doc","newDoc","entityIndex","findIndex","entityText","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a00981e5.chunk.js","sourcesContent":["import React from \"react\";\nimport { List } from \"react-virtualized\";\nimport \"./List.css\";\n\nfunction ListComponent(props) {\n  const renderRow = ({ index, key, style }) => {\n    return (\n      <div\n        onClick={\n          !!props.onListItemClick\n            ? () => props.onListItemClick(props.list[index], index)\n            : undefined\n        }\n        key={key}\n        style={style}\n        className={\n          index === props.selectedIndex\n            ? `${props.selectedClass} ListItems`\n            : \"ListItems\"\n        }\n      >\n        {index + 1}.&nbsp;{props.list[index][props.value]}\n      </div>\n    );\n  };\n  return (\n    <div className=\"list\">\n      <List\n        width={props.rowWidth}\n        height={props.listHeight}\n        rowHeight={props.rowHeight}\n        rowRenderer={renderRow}\n        rowCount={props.list.length}\n      />\n    </div>\n  );\n}\n\nexport default ListComponent;\n","import React from \"react\";\nimport \"./List.container.css\";\nimport ListComponent from \"../components/List\";\n\nfunction ListContainer(props) {\n  return (\n    <div className=\"ListContainer\">\n      <ListComponent\n        listHeight={700}\n        rowHeight={50}\n        rowWidth={250}\n        onListItemClick={props.onListItemClick}\n        list={props.docs}\n        value=\"name\"\n        selectedIndex={props.selectedIndex}\n        selectedClass=\"SelectedListItem\"\n      />\n    </div>\n  );\n}\n\nexport default ListContainer;\n","import React from \"react\";\nimport \"./Button.css\";\n\nfunction Button({ background, color, children, style, onClick }) {\n  const btnStyle = {\n    backgroundColor: background,\n    color: color\n  };\n  return (\n    <button\n      onClick={onClick}\n      style={{ ...btnStyle, ...style }}\n      className=\"Button\"\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport \"./EntityPanel.css\";\nimport Select from \"react-select\";\nimport Button from \"../common/Button\";\n\nfunction EntityPanel({\n  document,\n  entity,\n  deleteEntity,\n  saveRelatedEntities,\n  removeSelectedEntity\n}) {\n  const [dropdownVal, setDropdownVal] = useState([]);\n  const [dropdownOptions, setDropdownOptions] = useState([]);\n\n  useEffect(() => {\n    let filteredEntities = document.entities.filter(x => x._id !== entity._id);\n    filteredEntities = filteredEntities.filter(item =>\n      entity.linked_to.every(item2 => item2._id !== item._id)\n    );\n    setDropdownOptions(filteredEntities);\n    setDropdownVal([]);\n  }, [entity, document]);\n\n  return (\n    <div className=\"EntityPanel\">\n      <h4 className=\"EntityLabels\">\n        Selected Named Entity\n        <span\n          onClick={removeSelectedEntity}\n          style={{ float: \"right\", cursor: \"pointer\" }}\n        >\n          x\n        </span>\n      </h4>\n      <h4 className=\"SelctedEntityName\">{entity.val}</h4>\n      <h4 className=\"EntityLabels\">Related Entities:</h4>\n      <ol className=\"RelatedEntityList\">\n        {entity.linked_to && entity.linked_to.length\n          ? entity.linked_to.map(x => <li key={x._id}>{x.val}</li>)\n          : \"NA\"}\n      </ol>\n      <Select\n        value={dropdownVal}\n        onChange={selectedOptions => setDropdownVal(selectedOptions)}\n        options={dropdownOptions}\n        isMulti={true}\n        isSearchable={true}\n        closeMenuOnSelect={false}\n        getOptionLabel={option => option.val}\n        getOptionValue={option => option._id}\n        hideSelectedOptions={true}\n        placeholder=\"Select Related Entity\"\n      />\n      <Button\n        background=\"darkgreen\"\n        color=\"white\"\n        onClick={() => saveRelatedEntities(dropdownVal)}\n      >\n        Save Related Entities\n      </Button>\n      <Button background=\"darkred\" color=\"white\" onClick={deleteEntity}>\n        Delete Entity\n      </Button>\n    </div>\n  );\n}\n\nexport default EntityPanel;\n","import React, { useState, useEffect } from \"react\";\nimport Highlighter from \"react-highlight-words\";\nimport Popover from \"react-tiny-popover\";\n\nimport \"./DocViewer.css\";\nimport Button from \"../common/Button\";\n\nfunction DocViewer({\n  document,\n  selectedEntity,\n  onHighlightClick,\n  addSelectedTextAsEntity\n}) {\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n  const [selectedText, setSelectedText] = useState(\"\");\n  const onDoubleClick = () => {\n    const newSelectedText = window.getSelection().toString();\n    if (newSelectedText.length) {\n      if (!(selectedEntity && selectedEntity.val === newSelectedText)) {\n        setIsPopoverOpen(true);\n        setSelectedText(newSelectedText);\n        return;\n      }\n    }\n    setSelectedText(\"\");\n    setIsPopoverOpen(false);\n  };\n  useEffect(() => {\n    setIsPopoverOpen(false);\n  }, [document]);\n  function HighlightedEntity({ children }) {\n    return (\n      <mark\n        className={\n          selectedEntity && selectedEntity.val === children\n            ? \"HighlightClassName SelectedHighlight\"\n            : \"HighlightClassName\"\n        }\n        onClick={() => onHighlightClick(children)}\n      >\n        {children}\n      </mark>\n    );\n  }\n  return (\n    <Popover\n      isOpen={isPopoverOpen}\n      position={\"top\"} // preferred position\n      content={\n        <Button\n          onClick={() => addSelectedTextAsEntity(selectedText)}\n          background=\"lightgreen\"\n        >\n          Add as Named Entity\n        </Button>\n      }\n    >\n      <Highlighter\n        className=\"HighlightedEmail\"\n        highlightClassName=\"HighlightClassName\"\n        caseSensitive={true}\n        searchWords={document.searchWords}\n        autoEscape={true}\n        textToHighlight={document.text}\n        highlightTag={HighlightedEntity}\n        onDoubleClick={onDoubleClick}\n        onMouseUp={onDoubleClick}\n      />\n    </Popover>\n  );\n}\n\nexport default DocViewer;\n","const server_api = \"http://localhost:3500/api\";\nexport const getAllDocs = function() {\n  return fetch(server_api + \"/doc\")\n    .then(resp => resp.json()) // Transform the data into json\n    .then(function(data) {\n      return data;\n    });\n};\n\nexport const getTextFromFile = function(filename) {\n  console.log(filename);\n  return fetch(server_api + \"/doc/file?filename=\" + filename)\n    .then(resp => resp.text()) // Transform the data into text\n    .then(function(data) {\n      return data;\n    });\n};\n\nexport const updatedRelatedEntities = function(formData) {\n  return fetch(server_api + \"/doc/update_related_entities\", {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(formData)\n  }).then(response => response.json());\n};\n\nexport const deleteEntity = function(formData) {\n  return fetch(server_api + \"/doc/entity\", {\n    method: \"DELETE\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(formData)\n  }).then(response => response.json());\n};\n\nexport const deleteAllEntities = function(formData) {\n  return fetch(server_api + \"/doc/all_entities\", {\n    method: \"DELETE\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(formData)\n  }).then(response => response.json());\n};\n\nexport const addSelectedTextAsEntity = function(formData) {\n  return fetch(server_api + \"/doc/add_entity\", {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(formData)\n  }).then(response => response.json());\n};\n","import React, { Fragment } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport EntityPanel from \"../components/EntityPanel\";\nimport DocViewer from \"../components/DocViewer\";\nimport * as DocService from \"../services/Doc.service\";\nimport \"./DocViewer.container.css\";\nimport Button from \"../common/Button\";\n\nfunction DocViewerContainer({\n  document,\n  updateCurrentDocumentOnDeletion,\n  updateEntityInDoc,\n  addEntityToDoc,\n  selectedEntity,\n  onHighlightClick,\n  removeSelectedEntity\n}) {\n  const saveRelatedEntities = relatedEntities => {\n    console.log(\"save these- \", selectedEntity, relatedEntities);\n    DocService.updatedRelatedEntities({\n      docId: document._id,\n      entityId: selectedEntity._id,\n      relatedEntities\n    }).then(updatedEntity => {\n      updateEntityInDoc(updatedEntity);\n    });\n  };\n\n  const deleteEntity = () => {\n    console.log(\"delete entity- \", selectedEntity);\n    DocService.deleteEntity({\n      docId: document._id,\n      entity: selectedEntity._id\n    }).then(updatedDoc => {\n      updateCurrentDocumentOnDeletion(updatedDoc);\n    });\n  };\n\n  const deleteAllEntities = () => {\n    console.log(\"delete entity- \", selectedEntity);\n    DocService.deleteAllEntities({\n      docId: document._id\n    }).then(updatedDoc => {\n      updateCurrentDocumentOnDeletion(updatedDoc);\n    });\n  };\n\n  const addSelectedTextAsEntity = selectedText => {\n    console.log(selectedText);\n    DocService.addSelectedTextAsEntity({\n      docId: document._id,\n      selectedText\n    }).then(addedEntity => {\n      addEntityToDoc(addedEntity);\n    });\n  };\n\n  return (\n    <Fragment>\n      <DocViewer\n        className=\"DocViewer\"\n        document={document}\n        selectedEntity={selectedEntity}\n        onHighlightClick={onHighlightClick}\n        addSelectedTextAsEntity={addSelectedTextAsEntity}\n      />\n      <div className=\"entityNodeDiv\">\n        <CSSTransition\n          in={!!selectedEntity}\n          timeout={2000}\n          classNames=\"entityNode\"\n        >\n          <div>\n            {!!selectedEntity && (\n              <EntityPanel\n                saveRelatedEntities={saveRelatedEntities}\n                deleteEntity={deleteEntity}\n                document={document}\n                entity={selectedEntity}\n                deleteAllEntities={deleteAllEntities}\n                removeSelectedEntity={removeSelectedEntity}\n              />\n            )}\n          </div>\n        </CSSTransition>\n        <Button\n          style={{ marginTop: \"2rem\", width: \"100%\" }}\n          background=\"white\"\n          color=\"maroon\"\n          onClick={deleteAllEntities}\n        >\n          Delete All Entities\n        </Button>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default DocViewerContainer;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport \"./App.css\";\nimport ListContainer from \"./containers/List.container\";\nimport DocViewerContainer from \"./containers/DocViewer.container\";\nimport * as DocService from \"./services/Doc.service\";\n\nfunction App() {\n  const [currentDoc, setCurrentDoc] = useState(null);\n  const [currentDocIndex, setCurrentDocIndex] = useState(null);\n  const [docs, setDocs] = useState([]);\n  const [selectedEntity, setSelectedEntity] = useState(null);\n\n  useEffect(() => {\n    console.log(\"rendering again\");\n    DocService.getAllDocs()\n      .then(docs => {\n        setDocs(docs);\n        fetchFile(docs[0], 0);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const onHighlightClick = entityText => {\n    const selectedEntity = currentDoc.entities.filter(\n      x => x.val === entityText\n    )[0];\n    console.log(entityText, selectedEntity, currentDoc.entities);\n    setSelectedEntity(selectedEntity);\n  };\n\n  const fetchFile = (docMeta, index) => {\n    setCurrentDocIndex(index);\n    DocService.getTextFromFile(docMeta.name).then(text => {\n      docMeta.text = text;\n      docMeta.searchWords = docMeta.entities.map(x => x.val);\n      setCurrentDoc(docMeta);\n      setSelectedEntity(null);\n    });\n  };\n\n  const updateCurrentDocInList = updatedDoc => {\n    setDocs([\n      ...docs.slice(0, currentDocIndex),\n      updatedDoc,\n      ...docs.slice(currentDocIndex + 1)\n    ]);\n  };\n\n  const updateCurrentDocumentOnDeletion = doc => {\n    let newDoc = {\n      ...currentDoc,\n      entities: doc.entities,\n      searchWords: doc.entities.map(x => x.val)\n    };\n    setCurrentDoc(newDoc);\n    setSelectedEntity(null);\n    updateCurrentDocInList(newDoc);\n  };\n\n  const updateEntityInDoc = entity => {\n    const entityIndex = currentDoc.entities.findIndex(\n      x => x._id === entity._id\n    );\n    console.log(entityIndex, currentDoc, currentDoc.entities);\n    if (entityIndex !== -1) {\n      let newDoc = {\n        ...currentDoc,\n        entities: [\n          ...currentDoc.entities.slice(0, entityIndex),\n          entity,\n          ...currentDoc.entities.slice(entityIndex)\n        ]\n      };\n      setCurrentDoc(newDoc);\n      setSelectedEntity(entity);\n      updateCurrentDocInList(newDoc);\n    }\n    console.log(entityIndex, currentDoc, currentDoc.entities);\n  };\n\n  const addEntityToDoc = entity => {\n    let newDoc = {\n      ...currentDoc,\n      entities: [...currentDoc.entities, entity],\n      searchWords: [...currentDoc.searchWords, entity.val]\n    };\n    setCurrentDoc(newDoc);\n    updateCurrentDocInList(newDoc);\n  };\n\n  return (\n    <Fragment>\n      <header className=\"App-header\">\n        <h1>Demo for TextIQ {!!currentDoc && `-${currentDoc.name}`}</h1>\n      </header>\n      <div className=\"App\">\n        {/* <FileUploader /> */}\n        {docs.length ? (\n          <ListContainer\n            selectedIndex={currentDocIndex}\n            onListItemClick={fetchFile}\n            docs={docs}\n          />\n        ) : (\n          <span>Loading...</span>\n        )}\n        {!!currentDoc && (\n          <DocViewerContainer\n            updateCurrentDocumentOnDeletion={updateCurrentDocumentOnDeletion}\n            updateEntityInDoc={updateEntityInDoc}\n            addEntityToDoc={addEntityToDoc}\n            document={currentDoc}\n            onHighlightClick={onHighlightClick}\n            selectedEntity={selectedEntity}\n            removeSelectedEntity={() => setSelectedEntity(null)}\n          />\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register();\n"],"sourceRoot":""}